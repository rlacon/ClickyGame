{"version":3,"sources":["components/AnimalCrossingTitle.png","components/CardContainer.js","components/Cards.js","components/Jumbotron.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardContainer","props","style","padding","margin","display","alignItems","justifyContent","marginBottom","className","children","Cards","cursor","textAlign","maxWidth","marginTop","alt","id","src","url","onClick","loseGame","Jumbotron","logo","Game","handleResize","e","setState","windowWidth","window","innerWidth","windowHeight","innerHeight","increaseScore","winSoundEffect","Audio","count","state","this","topCount","play","stopConfetti","resetGame","setTimeout","bind","CardData","map","item","alreadyClicked","clickedId","clickSoundEffect","loseSoundEffect","visible","hidePlusScore","resetScore","shake","pointsToSubtract","hideMinusScore","shuffleCards","sort","Math","random","fadeIn","addEventListener","width","height","recycle","run","numberOfPieces","paddingRight","color","key","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67423a37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AnimalCrossingTitle.bbd50caa.png\";","import React from \"react\";\n\nfunction CardContainer(props) {\n  return (\n    <div style={{ padding: '5px', margin: 'auto', display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '50px' }} className=\"row\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default CardContainer;","import React from 'react';\n\nfunction Cards(props) {\n  return (\n    <div className=\"card\n                col-xs-4\n                col-sm-3\n                col-md-2\n                col-lg-2\">\n      <img\n        style={{ cursor: 'pointer', textAlign: 'center', margin: 'auto', maxWidth: '100%', marginTop: '5px', marginBottom: '5px' }}\n        alt={props.id}\n        src={props.url}\n        onClick={() => {\n          props.loseGame(props.id);\n        }}\n        className=\"img\"\n      />\n    </div>\n  );\n}\n\nexport default Cards;","import React from \"react\";\nimport logo from './AnimalCrossingTitle.png';\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <div className=\"container\">\n      <img\n        alt='Animal Crossing logo'\n        src={logo}\n        className=\"logo\"\n      />\n        <h1 className=\"display-4\">Clicky Game</h1>\n        <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport CardContainer from \"./CardContainer\";\nimport Cards from \"./Cards\";\nimport CardData from \"../CardData.json\";\nimport Jumbotron from \"./Jumbotron\";\nimport Confetti from 'react-confetti'\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      CardData,\n      count: 0,\n      topCount: 0,\n      fadeIn: false,\n      visible: false,\n      resetScore: false,\n      pointsToSubtract: 0,\n      shake: false,\n      stopConfetti: true\n    };\n  }\n\n  handleResize = (e) => {\n    this.setState({ windowWidth: window.innerWidth });\n    this.setState({ windowHeight: window.innerHeight });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  // Increases current score and matches the value of high score if it's greater than or equal to it\n  increaseScore = () => {\n    let winSoundEffect = new Audio(\"/win.mp3\");\n\n    this.setState({\n      count: this.state.count + 1\n    }, function () {\n      if (this.state.count >= this.state.topCount) {\n        this.setState({ topCount: this.state.count });\n        if (this.state.count === 12) {\n          winSoundEffect.play();\n          this.setState({ stopConfetti: false });\n          this.resetGame();\n          setTimeout(this.stopConfetti, 10000);\n        }\n      }\n    }.bind(this));\n  }\n\n  resetGame = () => {\n    this.setState({ count: 0 });\n    this.state.CardData.map(item => {\n      if (item.alreadyClicked === true) {\n        item.alreadyClicked = false;\n      }\n      return item;\n    });\n  }\n\n  // Causes the state of the CardData object to flip from false to true\n  // Runs resetGame if true is already clicked\n  loseGame = clickedId => {\n    let clickSoundEffect = new Audio(\"/coin_effect.mp3\");\n    let loseSoundEffect = new Audio(\"/lose.mp3\");\n\n    this.increaseScore();\n\n    this.state.CardData.map(item => {\n      if (item.id === clickedId) {\n        if (item.alreadyClicked === false) {\n          clickSoundEffect.play();\n          this.setState({ visible: true });\n          setTimeout(this.hidePlusScore, 500);\n          item.alreadyClicked = true;\n        } else {\n          loseSoundEffect.play();\n          this.setState({ resetScore: true });\n          this.setState({ shake: true });\n          this.setState({ pointsToSubtract: this.state.count });\n          setTimeout(this.hideMinusScore, 500);\n          this.resetGame();\n        }\n      }\n      return item;\n    });\n    this.setState({ CardData });\n    this.shuffleCards();\n  }\n\n  hidePlusScore = () => {\n    this.setState({ visible: false });\n  }\n\n  hideMinusScore = () => {\n    this.setState({ resetScore: false });\n    this.setState({ shake: false });\n  }\n\n  stopConfetti = () => {\n    this.setState({ stopConfetti: true });\n  }\n\n  shuffleCards = () => {\n    const CardData = this.state.CardData;\n    CardData.sort(() => Math.random() - 0.5);\n    this.setState({ CardData });\n  }\n\n  render() {\n    return (\n      <>\n        <Confetti\n          width={this.state.windowWidth}\n          height={this.state.windowHeight}\n          recycle={false}\n          run={!this.state.stopConfetti}\n          numberOfPieces={500}\n        />\n        <div\n          style={{ textAlign: 'center' }}>\n\n          <Jumbotron />\n          <div className=\"score_container\">\n            {/* Score */}\n            <div className=\"score_counter\">\n              <p>Current Score: {this.state.count}</p>\n            </div>\n\n            {/* Point Meter */}\n            <div className=\"fade-in\">\n              <div className={this.state.visible ? 'fade-in' : 'fade-out'}>\n                <p style={{ paddingRight: '10px', color: '#0000E0' }}>+1</p>\n              </div>\n            </div>\n            <div className=\"fade-in\">\n              <div className={this.state.resetScore ? 'fade-in' : 'fade-out'}>\n                <p style={{ paddingRight: '10px', color: '#8B0000' }}>-{this.state.pointsToSubtract}</p>\n              </div>\n            </div>\n\n            {/* High Score */}\n            <div className=\"high_score_counter\">\n              <p>High Score: {this.state.topCount}</p>\n            </div>\n          </div>\n          <div className={this.state.shake ? 'card-shake' : ''}>\n            <CardContainer>\n              {\n                this.state.CardData.map(item => (\n                  <Cards\n                    style={{ cursor: 'pointer' }}\n                    key={item.id}\n                    id={item.id}\n                    url={item.url}\n                    loseGame={this.loseGame} />\n                ))\n              }\n            </CardContainer>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game.js\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}